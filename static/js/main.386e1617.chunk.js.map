{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","extractRichText","plainText","resetTimer","e","clearInterval","timer","setState","wordIndex","letterIndex","userInput","timerStarted","seconds","secondsLeft","totalSeconds","wpm","startTimer","setInterval","state","prevState","Math","floor","handleChange","target","value","curWord","words","indexOf","word_red","length","_this2","axios","get","then","res","console","log","data","text_out","match","filter","word","map","slice","replace","text","catch","err","error","_this3","react_default","a","createElement","className","wIndex","Fragment","classNames","word__current","word__correct","word__red","key","split","letter","lIndex","green","red_bg","type","onChange","readOnly","onClick","disabled","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.386e1617.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport classNames from \"classnames\";\n\nimport \"./bootstrap-grid.min.css\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: [],\n      wordIndex: 0,\n      letterIndex: 0,\n      userInput: \"\",\n      timerStarted: false,\n      seconds: 0,\n      secondsLeft: 60,\n      totalSeconds: 60,\n      wpm: 0\n    };\n  }\n\n  extractRichText = plainText => {};\n\n  componentDidMount() {\n    axios\n      .get(\"http://www.randomtext.me/api/\")\n      .then(res => {\n        console.log(res);\n        let words = res.data.text_out\n          .match(/\\w+/g)\n          .filter(word => word !== \"p\")\n          .map(word => word + \" \");\n\n        words = words.slice(0,25);\n\n        words[words.length - 1] = words[words.length - 1].replace(\" \", \".\");\n\n        this.setState({\n          text: res.data.text_out,\n          words: words\n        });\n        console.log(words);\n      })\n      .catch(err => console.error(err));\n  }\n\n  resetTimer = e => {\n    clearInterval(this.timer);\n    this.setState({\n      wordIndex: 0,\n      letterIndex: 0,\n      userInput: \"\",\n      timerStarted: false,\n      seconds: 0,\n      secondsLeft: 60,\n      totalSeconds: 60,\n      wpm: 0\n    });\n  }\n\n  startTimer = e => {\n    this.resetTimer();\n    this.setState({\n      timerStarted: true\n    });\n    this.timer = setInterval(() => {\n      if (this.state.secondsLeft === 0) {\n        clearInterval(this.timer);\n        this.setState({\n          timerStarted: false\n        });\n      } else {\n        this.setState(prevState => ({\n          secondsLeft: prevState.secondsLeft - 1,\n          wpm: Math.floor(\n            (prevState.wordIndex /\n              (prevState.totalSeconds - prevState.secondsLeft + 1)) *\n              60\n          )\n        }));\n      }\n    }, 1000);\n    // Count Up:\n    // this.timer = setInterval(()=>{\n    //   this.setState(prevState => ({\n    //     seconds: prevState.seconds+1,\n    //     wpm: Math.floor(prevState.wordIndex / (prevState.seconds+1) * 60)\n    //   }))\n    // },1000);\n  };\n\n  handleChange = e => {\n    // console.log(e.target.value);\n    const userInput = e.target.value;\n    const curWord = this.state.words[this.state.wordIndex];\n    this.setState(prevState => {\n      if (curWord === userInput) {\n        if (prevState.wordIndex === this.state.words.length - 1) {\n          clearInterval(this.timer);\n          this.setState({\n            wordIndex: prevState.wordIndex + 1,\n            userInput: \"\",\n            letterIndex: 0,\n            timerStarted: false\n          });\n        } else\n          return {\n            wordIndex: prevState.wordIndex + 1,\n            userInput: \"\",\n            letterIndex: 0\n          };\n      } else if (curWord.indexOf(userInput) === 0) {\n        // console.log(\"Word underprogression\");\n        return {\n          userInput,\n          word_red: false,\n          letterIndex: userInput.length\n        };\n      } else {\n        return {\n          userInput,\n          word_red: true\n        };\n      }\n    });\n  };\n\n  render() {\n    const userInput = this.state.userInput;\n    const wordIndex = this.state.wordIndex;\n    const letterIndex = this.state.letterIndex;\n\n    return (\n      <div className=\"container\">\n        <header>\n          <h1>Type Writer App</h1>\n          {/* <h1 className=\"timer\">{this.state.seconds}</h1> */}\n          <h1 className=\"timer\">{this.state.secondsLeft}</h1>\n        </header>\n        <div className=\"textToWrite\">\n          {this.state.words.map((word, wIndex) => {\n            return (\n              <>\n                <span\n                  className={classNames(\"word\", {\n                    word__current: wIndex === wordIndex,\n                    word__correct: wIndex < wordIndex,\n                    word__red: this.state.word_red && wIndex === wordIndex\n                  })}\n                  key={wIndex}\n                >\n                  {/* {word} */}\n                  {word.split(\"\").map((letter, lIndex) =>\n                    wIndex === wordIndex ? (\n                      <span\n                        className={classNames(\"letter\", {\n                          green: lIndex < letterIndex,\n                          red_bg:\n                            letterIndex <= lIndex &&\n                            lIndex <\n                              letterIndex + userInput.length - letterIndex &&\n                            this.state.word_red\n                        })}\n                        key={lIndex}\n                      >\n                        {letter}\n                      </span>\n                    ) : (\n                      <span key={lIndex}>{letter}</span>\n                    )\n                  )}\n                </span>\n                &nbsp;\n              </>\n            );\n          })}\n        </div>\n\n        <input\n          type=\"text\"\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          className={classNames({\n            red_bg: this.state.word_red\n          })}\n          readOnly={!this.state.timerStarted}\n        />\n\n        <button onClick={this.startTimer} disabled={this.state.timerStarted}>Start Timer</button>\n        <button onClick={this.resetTimer}>Reset</button>\n\n        <h2>WPM: {this.state.wpm}</h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}